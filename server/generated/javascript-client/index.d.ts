// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  bookmark: (where?: BookmarkWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bookmark: (where: BookmarkWhereUniqueInput) => BookmarkPromise;
  bookmarks: (
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Bookmark>;
  bookmarksConnection: (
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BookmarkConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikePromise;
  likes: (
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Like>;
  likesConnection: (
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LikeConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBookmark: (data: BookmarkCreateInput) => BookmarkPromise;
  updateBookmark: (
    args: { data: BookmarkUpdateInput; where: BookmarkWhereUniqueInput }
  ) => BookmarkPromise;
  upsertBookmark: (
    args: {
      where: BookmarkWhereUniqueInput;
      create: BookmarkCreateInput;
      update: BookmarkUpdateInput;
    }
  ) => BookmarkPromise;
  deleteBookmark: (where: BookmarkWhereUniqueInput) => BookmarkPromise;
  deleteManyBookmarks: (where?: BookmarkWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (
    args: { data: LikeUpdateInput; where: LikeWhereUniqueInput }
  ) => LikePromise;
  upsertLike: (
    args: {
      where: LikeWhereUniqueInput;
      create: LikeCreateInput;
      update: LikeUpdateInput;
    }
  ) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bookmark: (
    where?: BookmarkSubscriptionWhereInput
  ) => BookmarkSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "username_ASC"
  | "username_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "userImage_ASC"
  | "userImage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BookmarkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "postImage_ASC"
  | "postImage_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "text_ASC"
  | "text_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BookmarkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  bio?: String;
  bio_not?: String;
  bio_in?: String[] | String;
  bio_not_in?: String[] | String;
  bio_lt?: String;
  bio_lte?: String;
  bio_gt?: String;
  bio_gte?: String;
  bio_contains?: String;
  bio_not_contains?: String;
  bio_starts_with?: String;
  bio_not_starts_with?: String;
  bio_ends_with?: String;
  bio_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  userImage?: String;
  userImage_not?: String;
  userImage_in?: String[] | String;
  userImage_not_in?: String[] | String;
  userImage_lt?: String;
  userImage_lte?: String;
  userImage_gt?: String;
  userImage_gte?: String;
  userImage_contains?: String;
  userImage_not_contains?: String;
  userImage_starts_with?: String;
  userImage_not_starts_with?: String;
  userImage_ends_with?: String;
  userImage_not_ends_with?: String;
  following_every?: UserWhereInput;
  following_some?: UserWhereInput;
  following_none?: UserWhereInput;
  followers_every?: UserWhereInput;
  followers_some?: UserWhereInput;
  followers_none?: UserWhereInput;
  likes_every?: LikeWhereInput;
  likes_some?: LikeWhereInput;
  likes_none?: LikeWhereInput;
  bookmarks_every?: BookmarkWhereInput;
  bookmarks_some?: BookmarkWhereInput;
  bookmarks_none?: BookmarkWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LikeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  liker?: UserWhereInput;
  post?: PostWhereInput;
  comment?: CommentWhereInput;
  AND?: LikeWhereInput[] | LikeWhereInput;
  OR?: LikeWhereInput[] | LikeWhereInput;
  NOT?: LikeWhereInput[] | LikeWhereInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  author?: UserWhereInput;
  postImage?: String;
  postImage_not?: String;
  postImage_in?: String[] | String;
  postImage_not_in?: String[] | String;
  postImage_lt?: String;
  postImage_lte?: String;
  postImage_gt?: String;
  postImage_gte?: String;
  postImage_contains?: String;
  postImage_not_contains?: String;
  postImage_starts_with?: String;
  postImage_not_starts_with?: String;
  postImage_ends_with?: String;
  postImage_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  likes_every?: LikeWhereInput;
  likes_some?: LikeWhereInput;
  likes_none?: LikeWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  author?: UserWhereInput;
  likes_every?: LikeWhereInput;
  likes_some?: LikeWhereInput;
  likes_none?: LikeWhereInput;
  post?: PostWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface BookmarkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  post?: PostWhereInput;
  bookmarkedBy?: UserWhereInput;
  AND?: BookmarkWhereInput[] | BookmarkWhereInput;
  OR?: BookmarkWhereInput[] | BookmarkWhereInput;
  NOT?: BookmarkWhereInput[] | BookmarkWhereInput;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type LikeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
}>;

export interface BookmarkCreateInput {
  post: PostCreateOneInput;
  bookmarkedBy: UserCreateOneWithoutBookmarksInput;
}

export interface PostCreateOneInput {
  create?: PostCreateInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateInput {
  author: UserCreateOneWithoutPostsInput;
  postImage?: String;
  description: String;
  comments?: CommentCreateManyWithoutPostInput;
  likes?: LikeCreateManyWithoutPostInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  fullName: String;
  username: String;
  bio?: String;
  email: String;
  password: String;
  userImage?: String;
  following?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingInput;
  likes?: LikeCreateManyWithoutLikerInput;
  bookmarks?: BookmarkCreateManyWithoutBookmarkedByInput;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutFollowersInput {
  fullName: String;
  username: String;
  bio?: String;
  email: String;
  password: String;
  userImage?: String;
  following?: UserCreateManyWithoutFollowersInput;
  likes?: LikeCreateManyWithoutLikerInput;
  bookmarks?: BookmarkCreateManyWithoutBookmarkedByInput;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface LikeCreateManyWithoutLikerInput {
  create?: LikeCreateWithoutLikerInput[] | LikeCreateWithoutLikerInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface LikeCreateWithoutLikerInput {
  post?: PostCreateOneWithoutLikesInput;
  comment?: CommentCreateOneWithoutLikesInput;
}

export interface PostCreateOneWithoutLikesInput {
  create?: PostCreateWithoutLikesInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateWithoutLikesInput {
  author: UserCreateOneWithoutPostsInput;
  postImage?: String;
  description: String;
  comments?: CommentCreateManyWithoutPostInput;
}

export interface CommentCreateManyWithoutPostInput {
  create?: CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutPostInput {
  text: String;
  author: UserCreateOneInput;
  likes?: LikeCreateManyWithoutCommentInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  fullName: String;
  username: String;
  bio?: String;
  email: String;
  password: String;
  userImage?: String;
  following?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingInput;
  likes?: LikeCreateManyWithoutLikerInput;
  bookmarks?: BookmarkCreateManyWithoutBookmarkedByInput;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutFollowingInput {
  fullName: String;
  username: String;
  bio?: String;
  email: String;
  password: String;
  userImage?: String;
  followers?: UserCreateManyWithoutFollowingInput;
  likes?: LikeCreateManyWithoutLikerInput;
  bookmarks?: BookmarkCreateManyWithoutBookmarkedByInput;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface BookmarkCreateManyWithoutBookmarkedByInput {
  create?:
    | BookmarkCreateWithoutBookmarkedByInput[]
    | BookmarkCreateWithoutBookmarkedByInput;
  connect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
}

export interface BookmarkCreateWithoutBookmarkedByInput {
  post: PostCreateOneInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutAuthorInput {
  postImage?: String;
  description: String;
  comments?: CommentCreateManyWithoutPostInput;
  likes?: LikeCreateManyWithoutPostInput;
}

export interface LikeCreateManyWithoutPostInput {
  create?: LikeCreateWithoutPostInput[] | LikeCreateWithoutPostInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface LikeCreateWithoutPostInput {
  liker: UserCreateOneWithoutLikesInput;
  comment?: CommentCreateOneWithoutLikesInput;
}

export interface UserCreateOneWithoutLikesInput {
  create?: UserCreateWithoutLikesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutLikesInput {
  fullName: String;
  username: String;
  bio?: String;
  email: String;
  password: String;
  userImage?: String;
  following?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingInput;
  bookmarks?: BookmarkCreateManyWithoutBookmarkedByInput;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface CommentCreateOneWithoutLikesInput {
  create?: CommentCreateWithoutLikesInput;
  connect?: CommentWhereUniqueInput;
}

export interface CommentCreateWithoutLikesInput {
  text: String;
  author: UserCreateOneInput;
  post: PostCreateOneWithoutCommentsInput;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: PostCreateWithoutCommentsInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutPostsInput;
  postImage?: String;
  description: String;
  likes?: LikeCreateManyWithoutPostInput;
}

export interface LikeCreateManyWithoutCommentInput {
  create?: LikeCreateWithoutCommentInput[] | LikeCreateWithoutCommentInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface LikeCreateWithoutCommentInput {
  liker: UserCreateOneWithoutLikesInput;
  post?: PostCreateOneWithoutLikesInput;
}

export interface UserCreateOneWithoutBookmarksInput {
  create?: UserCreateWithoutBookmarksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutBookmarksInput {
  fullName: String;
  username: String;
  bio?: String;
  email: String;
  password: String;
  userImage?: String;
  following?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingInput;
  likes?: LikeCreateManyWithoutLikerInput;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface BookmarkUpdateInput {
  post?: PostUpdateOneRequiredInput;
  bookmarkedBy?: UserUpdateOneRequiredWithoutBookmarksInput;
}

export interface PostUpdateOneRequiredInput {
  create?: PostCreateInput;
  update?: PostUpdateDataInput;
  upsert?: PostUpsertNestedInput;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateDataInput {
  author?: UserUpdateOneRequiredWithoutPostsInput;
  postImage?: String;
  description?: String;
  comments?: CommentUpdateManyWithoutPostInput;
  likes?: LikeUpdateManyWithoutPostInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutPostsDataInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
  following?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingInput;
  likes?: LikeUpdateManyWithoutLikerInput;
  bookmarks?: BookmarkUpdateManyWithoutBookmarkedByInput;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
  following?: UserUpdateManyWithoutFollowersInput;
  likes?: LikeUpdateManyWithoutLikerInput;
  bookmarks?: BookmarkUpdateManyWithoutBookmarkedByInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface LikeUpdateManyWithoutLikerInput {
  create?: LikeCreateWithoutLikerInput[] | LikeCreateWithoutLikerInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutLikerInput[]
    | LikeUpdateWithWhereUniqueWithoutLikerInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutLikerInput[]
    | LikeUpsertWithWhereUniqueWithoutLikerInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface LikeUpdateWithWhereUniqueWithoutLikerInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutLikerDataInput;
}

export interface LikeUpdateWithoutLikerDataInput {
  post?: PostUpdateOneWithoutLikesInput;
  comment?: CommentUpdateOneWithoutLikesInput;
}

export interface PostUpdateOneWithoutLikesInput {
  create?: PostCreateWithoutLikesInput;
  update?: PostUpdateWithoutLikesDataInput;
  upsert?: PostUpsertWithoutLikesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateWithoutLikesDataInput {
  author?: UserUpdateOneRequiredWithoutPostsInput;
  postImage?: String;
  description?: String;
  comments?: CommentUpdateManyWithoutPostInput;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: String;
  author?: UserUpdateOneRequiredInput;
  likes?: LikeUpdateManyWithoutCommentInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
  following?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingInput;
  likes?: LikeUpdateManyWithoutLikerInput;
  bookmarks?: BookmarkUpdateManyWithoutBookmarkedByInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
  followers?: UserUpdateManyWithoutFollowingInput;
  likes?: LikeUpdateManyWithoutLikerInput;
  bookmarks?: BookmarkUpdateManyWithoutBookmarkedByInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface BookmarkUpdateManyWithoutBookmarkedByInput {
  create?:
    | BookmarkCreateWithoutBookmarkedByInput[]
    | BookmarkCreateWithoutBookmarkedByInput;
  delete?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  connect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  disconnect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  update?:
    | BookmarkUpdateWithWhereUniqueWithoutBookmarkedByInput[]
    | BookmarkUpdateWithWhereUniqueWithoutBookmarkedByInput;
  upsert?:
    | BookmarkUpsertWithWhereUniqueWithoutBookmarkedByInput[]
    | BookmarkUpsertWithWhereUniqueWithoutBookmarkedByInput;
  deleteMany?: BookmarkScalarWhereInput[] | BookmarkScalarWhereInput;
}

export interface BookmarkUpdateWithWhereUniqueWithoutBookmarkedByInput {
  where: BookmarkWhereUniqueInput;
  data: BookmarkUpdateWithoutBookmarkedByDataInput;
}

export interface BookmarkUpdateWithoutBookmarkedByDataInput {
  post?: PostUpdateOneRequiredInput;
}

export interface BookmarkUpsertWithWhereUniqueWithoutBookmarkedByInput {
  where: BookmarkWhereUniqueInput;
  update: BookmarkUpdateWithoutBookmarkedByDataInput;
  create: BookmarkCreateWithoutBookmarkedByInput;
}

export interface BookmarkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: BookmarkScalarWhereInput[] | BookmarkScalarWhereInput;
  OR?: BookmarkScalarWhereInput[] | BookmarkScalarWhereInput;
  NOT?: BookmarkScalarWhereInput[] | BookmarkScalarWhereInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  postImage?: String;
  description?: String;
  comments?: CommentUpdateManyWithoutPostInput;
  likes?: LikeUpdateManyWithoutPostInput;
}

export interface LikeUpdateManyWithoutPostInput {
  create?: LikeCreateWithoutPostInput[] | LikeCreateWithoutPostInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutPostInput[]
    | LikeUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutPostInput[]
    | LikeUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutPostDataInput;
}

export interface LikeUpdateWithoutPostDataInput {
  liker?: UserUpdateOneRequiredWithoutLikesInput;
  comment?: CommentUpdateOneWithoutLikesInput;
}

export interface UserUpdateOneRequiredWithoutLikesInput {
  create?: UserCreateWithoutLikesInput;
  update?: UserUpdateWithoutLikesDataInput;
  upsert?: UserUpsertWithoutLikesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutLikesDataInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
  following?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingInput;
  bookmarks?: BookmarkUpdateManyWithoutBookmarkedByInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput;
  create: UserCreateWithoutLikesInput;
}

export interface CommentUpdateOneWithoutLikesInput {
  create?: CommentCreateWithoutLikesInput;
  update?: CommentUpdateWithoutLikesDataInput;
  upsert?: CommentUpsertWithoutLikesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CommentWhereUniqueInput;
}

export interface CommentUpdateWithoutLikesDataInput {
  text?: String;
  author?: UserUpdateOneRequiredInput;
  post?: PostUpdateOneRequiredWithoutCommentsInput;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: PostCreateWithoutCommentsInput;
  update?: PostUpdateWithoutCommentsDataInput;
  upsert?: PostUpsertWithoutCommentsInput;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateWithoutCommentsDataInput {
  author?: UserUpdateOneRequiredWithoutPostsInput;
  postImage?: String;
  description?: String;
  likes?: LikeUpdateManyWithoutPostInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithoutLikesInput {
  update: CommentUpdateWithoutLikesDataInput;
  create: CommentCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutPostDataInput;
  create: LikeCreateWithoutPostInput;
}

export interface LikeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  OR?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  NOT?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  postImage?: String;
  postImage_not?: String;
  postImage_in?: String[] | String;
  postImage_not_in?: String[] | String;
  postImage_lt?: String;
  postImage_lte?: String;
  postImage_gt?: String;
  postImage_gte?: String;
  postImage_contains?: String;
  postImage_not_contains?: String;
  postImage_starts_with?: String;
  postImage_not_starts_with?: String;
  postImage_ends_with?: String;
  postImage_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  postImage?: String;
  description?: String;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  bio?: String;
  bio_not?: String;
  bio_in?: String[] | String;
  bio_not_in?: String[] | String;
  bio_lt?: String;
  bio_lte?: String;
  bio_gt?: String;
  bio_gte?: String;
  bio_contains?: String;
  bio_not_contains?: String;
  bio_starts_with?: String;
  bio_not_starts_with?: String;
  bio_ends_with?: String;
  bio_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  userImage?: String;
  userImage_not?: String;
  userImage_in?: String[] | String;
  userImage_not_in?: String[] | String;
  userImage_lt?: String;
  userImage_lte?: String;
  userImage_gt?: String;
  userImage_gte?: String;
  userImage_contains?: String;
  userImage_not_contains?: String;
  userImage_starts_with?: String;
  userImage_not_starts_with?: String;
  userImage_ends_with?: String;
  userImage_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface LikeUpdateManyWithoutCommentInput {
  create?: LikeCreateWithoutCommentInput[] | LikeCreateWithoutCommentInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutCommentInput[]
    | LikeUpdateWithWhereUniqueWithoutCommentInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutCommentInput[]
    | LikeUpsertWithWhereUniqueWithoutCommentInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface LikeUpdateWithWhereUniqueWithoutCommentInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutCommentDataInput;
}

export interface LikeUpdateWithoutCommentDataInput {
  liker?: UserUpdateOneRequiredWithoutLikesInput;
  post?: PostUpdateOneWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutCommentInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutCommentDataInput;
  create: LikeCreateWithoutCommentInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: String;
}

export interface PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput;
  create: PostCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutLikerInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutLikerDataInput;
  create: LikeCreateWithoutLikerInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertNestedInput {
  update: PostUpdateDataInput;
  create: PostCreateInput;
}

export interface UserUpdateOneRequiredWithoutBookmarksInput {
  create?: UserCreateWithoutBookmarksInput;
  update?: UserUpdateWithoutBookmarksDataInput;
  upsert?: UserUpsertWithoutBookmarksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutBookmarksDataInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
  following?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingInput;
  likes?: LikeUpdateManyWithoutLikerInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface UserUpsertWithoutBookmarksInput {
  update: UserUpdateWithoutBookmarksDataInput;
  create: UserCreateWithoutBookmarksInput;
}

export interface CommentCreateInput {
  text: String;
  author: UserCreateOneInput;
  likes?: LikeCreateManyWithoutCommentInput;
  post: PostCreateOneWithoutCommentsInput;
}

export interface CommentUpdateInput {
  text?: String;
  author?: UserUpdateOneRequiredInput;
  likes?: LikeUpdateManyWithoutCommentInput;
  post?: PostUpdateOneRequiredWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  text?: String;
}

export interface LikeCreateInput {
  liker: UserCreateOneWithoutLikesInput;
  post?: PostCreateOneWithoutLikesInput;
  comment?: CommentCreateOneWithoutLikesInput;
}

export interface LikeUpdateInput {
  liker?: UserUpdateOneRequiredWithoutLikesInput;
  post?: PostUpdateOneWithoutLikesInput;
  comment?: CommentUpdateOneWithoutLikesInput;
}

export interface PostUpdateInput {
  author?: UserUpdateOneRequiredWithoutPostsInput;
  postImage?: String;
  description?: String;
  comments?: CommentUpdateManyWithoutPostInput;
  likes?: LikeUpdateManyWithoutPostInput;
}

export interface PostUpdateManyMutationInput {
  postImage?: String;
  description?: String;
}

export interface UserUpdateInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
  following?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingInput;
  likes?: LikeUpdateManyWithoutLikerInput;
  bookmarks?: BookmarkUpdateManyWithoutBookmarkedByInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  fullName?: String;
  username?: String;
  bio?: String;
  email?: String;
  password?: String;
  userImage?: String;
}

export interface BookmarkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BookmarkWhereInput;
  AND?: BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput;
  OR?: BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput;
  NOT?: BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LikeWhereInput;
  AND?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
  OR?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
  NOT?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Bookmark {
  id: ID_Output;
}

export interface BookmarkPromise extends Promise<Bookmark>, Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  bookmarkedBy: <T = UserPromise>() => T;
}

export interface BookmarkSubscription
  extends Promise<AsyncIterator<Bookmark>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  post: <T = PostSubscription>() => T;
  bookmarkedBy: <T = UserSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  postImage?: String;
  description: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  author: <T = UserPromise>() => T;
  postImage: () => Promise<String>;
  description: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likes: <T = FragmentableArray<Like>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = UserSubscription>() => T;
  postImage: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface User {
  id: ID_Output;
  fullName: String;
  username: String;
  bio?: String;
  email: String;
  password: String;
  userImage?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  username: () => Promise<String>;
  bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  userImage: () => Promise<String>;
  following: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  followers: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likes: <T = FragmentableArray<Like>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bookmarks: <T = FragmentableArray<Bookmark>>(
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userImage: () => Promise<AsyncIterator<String>>;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bookmarks: <T = Promise<AsyncIterator<BookmarkSubscription>>>(
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Like {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  liker: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  comment: <T = CommentPromise>() => T;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  liker: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  comment: <T = CommentSubscription>() => T;
}

export interface Comment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  likes: <T = FragmentableArray<Like>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  post: <T = PostPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  post: <T = PostSubscription>() => T;
}

export interface BookmarkConnection {
  pageInfo: PageInfo;
  edges: BookmarkEdge[];
}

export interface BookmarkConnectionPromise
  extends Promise<BookmarkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookmarkEdge>>() => T;
  aggregate: <T = AggregateBookmarkPromise>() => T;
}

export interface BookmarkConnectionSubscription
  extends Promise<AsyncIterator<BookmarkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookmarkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookmarkSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BookmarkEdge {
  node: Bookmark;
  cursor: String;
}

export interface BookmarkEdgePromise
  extends Promise<BookmarkEdge>,
    Fragmentable {
  node: <T = BookmarkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookmarkEdgeSubscription
  extends Promise<AsyncIterator<BookmarkEdge>>,
    Fragmentable {
  node: <T = BookmarkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBookmark {
  count: Int;
}

export interface AggregateBookmarkPromise
  extends Promise<AggregateBookmark>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookmarkSubscription
  extends Promise<AsyncIterator<AggregateBookmark>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BookmarkSubscriptionPayload {
  mutation: MutationType;
  node: Bookmark;
  updatedFields: String[];
  previousValues: BookmarkPreviousValues;
}

export interface BookmarkSubscriptionPayloadPromise
  extends Promise<BookmarkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookmarkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookmarkPreviousValuesPromise>() => T;
}

export interface BookmarkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookmarkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookmarkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookmarkPreviousValuesSubscription>() => T;
}

export interface BookmarkPreviousValues {
  id: ID_Output;
}

export interface BookmarkPreviousValuesPromise
  extends Promise<BookmarkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface BookmarkPreviousValuesSubscription
  extends Promise<AsyncIterator<BookmarkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface LikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  postImage?: String;
  description: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  postImage: () => Promise<String>;
  description: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postImage: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  fullName: String;
  username: String;
  bio?: String;
  email: String;
  password: String;
  userImage?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  username: () => Promise<String>;
  bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  userImage: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userImage: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Bookmark",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
